ggplot(data = monthly, aes(x = date, y =     proportion_deaths)) +
geom_line() +
labs(x = "Date", y = "Proportion of Deaths")
## .... CODE FOR TEST 5 ^ ....
## From this date handwashing was made mandatory
handwashing_start = as.Date('1847-06-01')
## Add a TRUE/FALSE column to monthly called handwashing_started
monthly = monthly %>%
mutate(handwashing_started = date >= handwashing_start)
## Plot monthly proportion of deaths before and after handwashing
ggplot(data = monthly, aes(x = date, y = proportion_deaths, color =  handwashing_started)) +
geom_line() +
labs(x = "Date", y = "Proportion of Deaths")
## .... CODE FOR TEST 6 ^ ....
## Calculating the mean proportion of deaths before      and after handwashing.
monthly_summary <- monthly %>%
group_by(handwashing_started) %>%
summarize(mean_proportion_deaths = mean(proportion_deaths))
## Create the line graph.
ggplot(data = monthly, aes(x = dates, y = proportion_deaths)) +
geom_line()
## Printing out the summary.
monthly_summary
## .... CODE FOR TEST 7 ^ ....
## Calculating a 95% Confidence intrerval using t              .test
test_result <- t.test( proportion_deaths ~ handwashing_started, data = monthly)
## Call Test Result.
test_result
## .... CODE FOR TEST 8 ^ ....
## The data Semmelweis collected points to that:
doctors_should_wash_their_hands <- TRUE
## :)
---
title: "Handwashing"
author: "Tanith Norris"
date: "6/8/2022"
output: html_document
---
```{r}
## Load in the tidyverse package
library(tidyverse)
## .... YOUR CODE FOR TASK 1 ....
## Read datasets/yearly_deaths_by_clinic.csv into          yearly
yearly <- read_csv('datasets/yearly_deaths_by_clinic.csv')
# Print out yearly
yearly
## .... CODE FOR TEST 1 ^ ....
## Adding a new column with proportion of deaths per no. births
yearly <- yearly %>%
mutate(proportion_deaths = deaths / births)
## Print out yearly
yearly
## .... CODE FOR TEST 2 ^ ....
## Setting the size of plots in this notebook
options(repr.plot.width=7, repr.plot.height=4)
ggplot(data = yearly, aes(x = year, y =proportion_deaths, color = clinic)) +
geom_line()
## This plots yearly proportion of deaths at the two clinics
## .... CODE FOR TEST 3 ^ ....
## Read datasets/monthly_deaths.csv into monthly
monthly <- read_csv("datasets/monthly_deaths.csv")
## Adding a new column with proportion of deaths per no. births
monthly = monthly %>%
mutate(proportion_deaths = deaths / births)
## Print out the first rows in monthly
head(monthly)
## .... CODE FOR TEST 4 ^ ....
## Plot monthly proportion of deaths
ggplot(data = monthly, aes(x = date, y =     proportion_deaths)) +
geom_line() +
labs(x = "Date", y = "Proportion of Deaths")
## .... CODE FOR TEST 5 ^ ....
## From this date handwashing was made mandatory
handwashing_start = as.Date('1847-06-01')
## Add a TRUE/FALSE column to monthly called handwashing_started
monthly = monthly %>%
mutate(handwashing_started = date >= handwashing_start)
## Plot monthly proportion of deaths before and after handwashing
ggplot(data = monthly, aes(x = date, y = proportion_deaths, color =  handwashing_started)) +
geom_line() +
labs(x = "Date", y = "Proportion of Deaths")
## .... CODE FOR TEST 6 ^ ....
## Calculating the mean proportion of deaths before      and after handwashing.
monthly_summary <- monthly %>%
group_by(handwashing_started) %>%
summarize(mean_proportion_deaths = mean(proportion_deaths))
## Create the line graph.
ggplot(data = monthly, aes(x = dates, y = proportion_deaths)) +
geom_line()
## Printing out the summary.
monthly_summary
## .... CODE FOR TEST 7 ^ ....
## Calculating a 95% Confidence intrerval using t              .test
test_result <- t.test( proportion_deaths ~ handwashing_started, data = monthly)
## Call Test Result.
test_result
## .... CODE FOR TEST 8 ^ ....
## The data Semmelweis collected points to that:
doctors_should_wash_their_hands <- TRUE
## :)
```
## Calculating a 95% Confidence interval using t              .test
test_result <- t.test( proportion_deaths ~ handwashing_started, data = monthly)
## Call Test Result.
test_result
monthly <- read_csv("datasets/monthly_deaths.csv")
## Calculating a 95% Confidence interval using t              .test
test_result <- t.test( proportion_deaths ~ handwashing_started, data = monthly)
## Call Test Result.
test_result
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsxOFFICIAL")
print("The most powerful pokemon are as follows:")
filter(pokemonDatabase, powerful == TRUE)
print("The most powerful pokemon are as follows:")
print("The most powerful pokemon are as follows:")
filter(pokemonDatabase, powerful == TRUE)
---
## Load in the relevant packages to read data
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabase <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
strengths <- pokemonDatabase %>%
select(attack, defense, stamina)
boxplot(strengths,
xlab = "Strengths",
ylab = "Strength Ratings",
ylim = c(0,500),
main = "Strengths Rating for Pokemon")
pokemonDatabase_summary <- pokemonDatabase %>%
select(attack, defense, stamina) %>%
summary(pokemonDatabase)
pokemonDatabase_summary
attackFourthQuart <- pokemonDatabase$attack >= 204
defenseFourthQuart <- pokemonDatabase$defense >= 176
staminaFourthQuart <- pokemonDatabase$stamina >= 190
## Create Powerful TRUE/FALSE Column Check
pokemonDatabase <- pokemonDatabase %>%
mutate(powerful = attackFourthQuart &
defenseFourthQuart &
staminaFourthQuart)
## Print when in Doubt
pokemonDatabase
print("The most powerful pokemon are as follows:")
filter(pokemonDatabase, powerful == TRUE)
pokemonCapture <- pokemonDatabase %>%
select(main_type, capture_rate)
arrange(pokemonCapture, desc(capture_rate))
summary(pokemonCapture)
barplot(pokemonCapture$capture_rate)
height <- pokemonDatabase$"height(m)"
## Load in the relevant packages to read data
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
## Load in Pokemon Databases
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabase <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
## GETTING STARTED ::::::::::::::::::::::::::::::::
## 1ST TASK: DETERMINING POWERFUL POKEMON
## FIRST STEP: Defining Pokemon Strengths
## Create Vector by which we measure strengths
## and ratings for each facet of power
strengths <- pokemonDatabase %>%
select(attack, defense, stamina)
## Create Boxplot for Strength Ratings
boxplot(strengths,
xlab = "Strengths",
ylab = "Strength Ratings",
ylim = c(0,500),
main = "Strengths Rating for Pokemon")
## SECOND STEP: Creating a Powerful
## True/False Column based on Box Plot
## Run a Summary to Determine Boxplot Statistics
## and Print to prove
pokemonDatabase_summary <- pokemonDatabase %>%
select(attack, defense, stamina) %>%
summary(pokemonDatabase)
pokemonDatabase_summary
## Establish Vectors that filter responses for
## each strength based on 4th Quartile Value
attackFourthQuart <- pokemonDatabase$attack >= 204
defenseFourthQuart <- pokemonDatabase$defense >= 176
staminaFourthQuart <- pokemonDatabase$stamina >= 190
## Create Powerful TRUE/FALSE Column Check
pokemonDatabase <- pokemonDatabase %>%
mutate(powerful = attackFourthQuart &
defenseFourthQuart &
staminaFourthQuart)
## Print when in Doubt
pokemonDatabase
## Find way to separate which pokemon classify as
## powerful? How do I sort??
print("The most powerful pokemon are as follows:")
filter(pokemonDatabase, powerful == TRUE)
## 2ND TASK: TYPES OF POKEMON WITH
## HIGHEST CAPTURE RATE
## FIRST STEP: Select relevant categories
## and Arrange database in descending
## order by capture_rate, for convenience
## of reading data. and Print
pokemonCapture <- pokemonDatabase %>%
select(main_type, capture_rate)
arrange(pokemonCapture, desc(capture_rate))
summary(pokemonCapture)
## Create Barplot to Record Main Types vs. Capture
barplot(pokemonCapture$capture_rate)
#main = "Capture Rate of Pokemon Types",
#x = main_type,
#y = capture_rate)#,
#xlab = "Pokemon Types",
#ylab = "Capture Rate",
#ylim = c(0, 1))
## !??!?!?!??!
## 3RD TASK: BOX PLOT OF POKEMON TYPE AND HEIGHT/WEIGHT/BMI
## FIRST STEP: Print to create height and
## weight environment
## print summary to identify scale of the graph
height <- pokemonDatabase$"height(m)"
weight <- pokemonDatabase$"weight (kg)"
hwVector <- data.frame(height, weight)
summary(hwVector)
## Create scatter plot of height/weights
plot(hwVector,
xlab = "Height",
ylab = "Weight",
xlim = c(0,15),
ylim = c(0,1000),
main = "Pokemon Height vs. Weight Chart")
## STEP TWO: Create new vector that calculates
## BMI using kg / m^2
## STEP THREE: Create new column defining elements
## "Uderweight," "Healthy," "Overweight,"
## & "Obese" for pokemon.
## Load in the relevant packages to read data
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
## Load in Pokemon Databases
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabase <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
## GETTING STARTED ::::::::::::::::::::::::::::::::
## 1ST TASK: DETERMINING POWERFUL POKEMON
## FIRST STEP: Defining Pokemon Strengths
## Create Vector by which we measure strengths
## and ratings for each facet of power
strengths <- pokemonDatabase %>%
select(attack, defense, stamina)
## Create Boxplot for Strength Ratings
boxplot(strengths,
xlab = "Strengths",
ylab = "Strength Ratings",
ylim = c(0,500),
main = "Strengths Rating for Pokemon")
## SECOND STEP: Creating a Powerful
## True/False Column based on Box Plot
## Run a Summary to Determine Boxplot Statistics
## and Print to prove
pokemonDatabase_summary <- pokemonDatabase %>%
select(attack, defense, stamina) %>%
summary(pokemonDatabase)
pokemonDatabase_summary
## Establish Vectors that filter responses for
## each strength based on 4th Quartile Value
attackFourthQuart <- pokemonDatabase$attack >= 204
defenseFourthQuart <- pokemonDatabase$defense >= 176
staminaFourthQuart <- pokemonDatabase$stamina >= 190
## Create Powerful TRUE/FALSE Column Check
pokemonDatabase <- pokemonDatabase %>%
mutate(powerful = attackFourthQuart &
defenseFourthQuart &
staminaFourthQuart)
## Print when in Doubt
pokemonDatabase
## Find way to separate which pokemon classify as
## powerful? How do I sort??
print("The most powerful pokemon are as follows:")
filter(pokemonDatabase, powerful == TRUE)
## 2ND TASK: TYPES OF POKEMON WITH
## HIGHEST CAPTURE RATE
## FIRST STEP: Select relevant categories
## and Arrange database in descending
## order by capture_rate, for convenience
## of reading data. and Print
pokemonCapture <- pokemonDatabase %>%
select(main_type, capture_rate)
arrange(pokemonCapture, desc(capture_rate))
summary(pokemonCapture)
## Create Barplot to Record Main Types vs. Capture
barplot(pokemonCapture$capture_rate)
#main = "Capture Rate of Pokemon Types",
#x = main_type,
#y = capture_rate)#,
#xlab = "Pokemon Types",
#ylab = "Capture Rate",
#ylim = c(0, 1))
## !??!?!?!??!
## 3RD TASK: BOX PLOT OF POKEMON TYPE AND HEIGHT/WEIGHT/BMI
## FIRST STEP: Print to create height and
## weight environment
## print summary to identify scale of the graph
height <- pokemonDatabase$"height(m)"
weight <- pokemonDatabase$"weight (kg)"
hwVector <- data.frame(height, weight)
summary(hwVector)
## Create scatter plot of height/weights
plot(hwVector,
xlab = "Height",
ylab = "Weight",
xlim = c(0,15),
ylim = c(0,1000),
main = "Pokemon Height vs. Weight Chart")
## STEP TWO: Create new vector that calculates
## BMI using kg / m^2
## STEP THREE: Create new column defining elements
## "Uderweight," "Healthy," "Overweight,"
## & "Obese" for pokemon.
print("The most powerful pokemon are as follows:")
filter(pokemonDatabase, powerful == TRUE)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabase <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
library(tidyverse)
pokemonDatabase_summary
pokemonDatabase
read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
library(readxl)
library(readxl)
PokemonDatabaseOFFICIAL <- read_excel("PokemonDatabaseOFFICIAL.xlsx")
View(PokemonDatabaseOFFICIAL)
View(PokemonDatabase)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabase <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabaseReal <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
PokemonDatabaseOFFICIAL <- read_excel("GitHub/BPWorkshop2022/PokemonDatabaseOFFICIAL.xlsx")
pokemonDatabaseReal <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
---
## Load in the relevant packages to read data
library(tidyverse)
library(tidyverse)
library(readxl)
View(PokemonDatabaseOFFICIAL)
library(readxl)
PokemonDatabase <- read_excel("PokemonDatabase.xlsx")
View(PokemonDatabase)
PokemonDatabaseOFFICIAL <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabaseReal <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabaseOFFICIAL <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabaseReal <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
View(PokemonDatabase)
View(PokemonDatabaseOFFICIAL)
strengths <- pokemonDatabase %>%
select(attack, defense, stamina)
plot(hwVector,
xlab = "Height",
ylab = "Weight",
xlim = c(0,15),
ylim = c(0,1000),
main = "Pokemon Height vs. Weight Chart")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonCapture <- pokemonDatabase %>%
select(main_type, capture_rate)
arrange(pokemonCapture, desc(capture_rate))
summary(pokemonCapture)
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/TanithNorrisCloneFoler/PokemonDatabase.xlsx")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/TanithNorrisCloneFoler/PokemonDatabase.xlsx")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/TanithNorrisCloneFoler/PokemonDatabase.xlsx")
pokemonDatabase <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
library(tidyverse)
library(readxl)
library(boxplotdbl)
library(skimr)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xls")
library(readxl)
PokemonDatabase <- read_excel("~/GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
View(PokemonDatabase)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
library(readxl)
PokemonDatabase <- read_excel("~/GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
View(PokemonDatabase)
library(readxl)
PokemonDatabase <- read_excel("~/GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
View(PokemonDatabase)
PokemonDatabase <- read_excel("~/GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabase <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabaseReal <- pokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
View(PokemonDatabase)
pokemonDatabaseReal <- PokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabaseReal <- PokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
strengths <- pokemonDatabase %>%
select(attack, defense, stamina)
PokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabaseReal <- PokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabaseReal <- PokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabaseReal <- PokemonDatabase %>%
+     select(number, pokemon_name, main_type,
+            attack, defense, stamina,
+            "height(m)", "weight (kg)",
+            capture_rate)
pokemonDatabase <- read_excel("GitHub/BPWorkshop2022/PokemonDatabase.xlsx")
pokemonDatabaseReal <- PokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
pokemonDatabaseReal <- PokemonDatabase %>%
select(number, pokemon_name, main_type,
attack, defense, stamina,
"height(m)", "weight (kg)",
capture_rate)
strengths <- pokemonDatabase %>%
select(attack, defense, stamina)
strengths <- pokemonDatabase %>%
select(attack, defense, stamina)
View(PokemonDatabase)
View(pokemonDatabaseReal)
